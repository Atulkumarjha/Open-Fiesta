name: Docker CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          load: true
          tags: ai-fiesta:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests
        run: docker run --rm ai-fiesta:test npm test

      - name: Run linting
        run: docker run --rm ai-fiesta:test npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      image_labels: ${{ steps.meta.outputs.labels }}
      image_digest: ${{ steps.buildx.outputs.digest }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: buildx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/ai-fiesta ai-fiesta=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up production environment
        run: |
          # Create production environment file from secrets
          cat > .env.production << EOF
          NODE_ENV=production
          APP_URL=${{ secrets.PRODUCTION_APP_URL }}
          SHARE_URL_BASE=${{ secrets.PRODUCTION_APP_URL }}
          CORS_ORIGIN=${{ secrets.PRODUCTION_CORS_ORIGIN }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          METRICS_AUTH_TOKEN=${{ secrets.METRICS_AUTH_TOKEN }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          EOF
          
      - name: Deploy to production
        run: |
          echo "Deploying AI Fiesta to production..."
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Update docker-compose with new image
          export IMAGE_TAG=latest
          export APP_URL=${{ secrets.PRODUCTION_APP_URL }}
          
          # Deploy using docker-compose
          docker-compose -f docker-compose.prod.yml up -d --no-build
          
          # Wait for health check
          echo "Waiting for application to be healthy..."
          timeout 120 bash -c 'until curl -f ${{ secrets.PRODUCTION_APP_URL }}/api/health; do sleep 5; done'
          
          echo "Production deployment completed successfully!"
          
      - name: Run post-deployment tests
        run: |
          # Test sharing feature
          echo "Testing chat sharing feature..."
          
          # Test health endpoint
          curl -f ${{ secrets.PRODUCTION_APP_URL }}/api/health
          
          # Test metrics endpoint (if auth token is available)
          if [ -n "${{ secrets.METRICS_AUTH_TOKEN }}" ]; then
            curl -H "Authorization: Bearer ${{ secrets.METRICS_AUTH_TOKEN }}" \
                 -f ${{ secrets.PRODUCTION_APP_URL }}/api/metrics
          fi
          
          echo "Post-deployment tests completed!"
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
            # Send success notification (Slack, Discord, etc.)
          else
            echo "❌ Production deployment failed"
            # Send failure notification and rollback if needed
          fi